trigger:
- '*'

pool: EMRSTGSERVER

variables:
  buildConfiguration: 'Release'
  wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
  dotnetSdkVersion: '8.0.x'
  http_proxy: http://eproxy-emaar.goskope.com:8081
  https_proxy: http://eproxy-emaar.goskope.com:8081
  NODE_TLS_REJECT_UNAUTHORIZED: "0"

steps:
- powershell: |
    [Environment]::SetEnvironmentVariable("HTTP_PROXY", "http://eproxy-emaar.goskope.com:8081", "Process")
    [Environment]::SetEnvironmentVariable("HTTPS_PROXY", "http://eproxy-emaar.goskope.com:8081", "Process")
    [Environment]::SetEnvironmentVariable("http_proxy", "http://eproxy-emaar.goskope.com:8081", "Process")
    [Environment]::SetEnvironmentVariable("https_proxy", "http://eproxy-emaar.goskope.com:8081", "Process")
    [Environment]::SetEnvironmentVariable("NODE_TLS_REJECT_UNAUTHORIZED", "0", "Process")
  displayName: "Set proxy environment variables via powershell"
  
- task: UseDotNet@2
  displayName: 'Use .NET SDK 8.0.x'
  inputs:
    packageType: sdk
    version: '8.0.x'
    installationPath: $(Agent.ToolsDirectory)/dotnet

- task: Npm@1
  displayName: 'Run npm install'
  inputs:
    verbose: false

- script: './node_modules/.bin/sass $(wwwrootDir):$(wwwrootDir)'
  displayName: 'Compile Sass assets'

- task: gulp@1
  displayName: 'Run gulp tasks'

- script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
  displayName: 'Write build info'
  workingDirectory: Tailspin.SpaceGame.Web/wwwroot

- task: NuGetCommand@2
  displayName: 'Restore project dependencies Karthick'
  inputs:
    command: 'restore'
    restoreSolution: '**/*.sln'
    feedsToUse: 'select'
    vstsFeed: '$(System.TeamProject)/Tailspin.SpaceGame.Web.Models'

- task: DotNetCoreCLI@2
  displayName: 'Build the project - $(buildConfiguration)'
  inputs:
    command: 'build'
    arguments: '--no-restore --configuration $(buildConfiguration)'
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Run unit tests - $(buildConfiguration)'
  timeoutInMinutes: 10
  continueOnError: false
  inputs:
    command: 'test'
    projects: '**/*.Tests.csproj'
    arguments: '--no-build --configuration $(buildConfiguration) --logger trx'
    publishTestResults: true

- task: DotNetCoreCLI@2
  displayName: 'Publish the project - $(buildConfiguration)'
  inputs:
    command: 'publish'
    projects: '**/*.csproj'
    publishWebProjects: false
    arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
    zipAfterPublish: true

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
  condition: succeeded()
